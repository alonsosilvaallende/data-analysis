{
  
    
        "post0": {
            "title": "Import an R dataset in Python",
            "content": "I recently discovered the Rdatasets project which gives access to the datasets available in R&#39;s core datasets package and many other common R packages. There is a nice integration with The Datasets Package, which is the place where I originally discovered the Rdatasets project (see here). This is particularly revelant to people like me working on Survival Analysis where R is still predominant. . The list of available datasets can be found here and instructions to add new R datasets can be found here. I have made requests to add new datasets from asaur and mstate packages and the maintener, Professor Vincent Arel-Bundock, has responded very quickly (the datasets have been already added). . From the list of available datasets, we need to seach what&#39;s the dataset name (item name) and from which R package it&#39;s coming from. . For example, let&#39;s say we want to import the pharmacoSmoking dataset from the asaur package. . We will use The Datasets Package from statsmodels. . import statsmodels.api as sm . Then we need to use the function get_rdataset with the name of the item and the name of the package it&#39;s coming from. . pharmacoSmoking = sm.datasets.get_rdataset(&quot;pharmacoSmoking&quot;, &quot;asaur&quot;) . We can take a look at the documentation with the __doc__ attribute. . print(pharmacoSmoking.__doc__) . =============== =============== pharmacoSmoking R Documentation =============== =============== pharmacoSmoking Description ~~~~~~~~~~~ Randomized trial of triple therapy vs. patch for smoking cessation. Usage ~~~~~ :: data(&#34;pharmacoSmoking&#34;) Format ~~~~~~ A data frame with 125 observations on the following 14 variables. ``id`` patient ID number ``ttr`` Time in days until relapse ``relapse`` Indicator of relapse (return to smoking) ``grp`` Randomly assigned treatment group with levels ``combination`` or ``patchOnly`` ``age`` Age in years at time of randomization ``gender`` ``Female`` or ``Male`` ``race`` ``black``, ``hispanic``, ``white``, or ``other`` ``employment`` ``ft`` (full-time), ``pt`` (part-time), or ``other`` ``yearsSmoking`` Number of years the patient had been a smoker ``levelSmoking`` ``heavy`` or ``light`` ``ageGroup2`` Age group with levels ``21-49`` or ``50+`` ``ageGroup4`` Age group with levels ``21-34``, ``35-49``, ``50-64``, or ``65+`` ``priorAttempts`` The number of prior attempts to quit smoking ``longestNoSmoke`` The longest period of time, in days, that the patient has previously gone without smoking Source ~~~~~~ This data is from a clinical trial described in Steinberg et al. (2009) References ~~~~~~~~~~ Steinberg, M.B. Greenhaus, S. Schmelzer, A.C. Bover, M.T., Foulds, J., Hoover, D.R., and Carson, J.L. (2009) Triple-combination pharmacotherapy for medically ill smokers: A randomized trial. Annals of Internal Medicine 150, 447-454. Examples ~~~~~~~~ :: data(pharmacoSmoking) . And access the data with the data attribute. . pharmacoSmoking.data.head() . id ttr relapse grp age gender race employment yearsSmoking levelSmoking ageGroup2 ageGroup4 priorAttempts longestNoSmoke . 0 21 | 182 | 0 | patchOnly | 36 | Male | white | ft | 26 | heavy | 21-49 | 35-49 | 0 | 0 | . 1 113 | 14 | 1 | patchOnly | 41 | Male | white | other | 27 | heavy | 21-49 | 35-49 | 3 | 90 | . 2 39 | 5 | 1 | combination | 25 | Female | white | other | 12 | heavy | 21-49 | 21-34 | 3 | 21 | . 3 80 | 16 | 1 | combination | 54 | Male | white | ft | 39 | heavy | 50+ | 50-64 | 0 | 0 | . 4 87 | 0 | 1 | combination | 45 | Male | white | other | 30 | heavy | 21-49 | 35-49 | 0 | 0 | .",
            "url": "https://alonsosilvaallende.github.io/data-analysis/jupyter/2021/08/04/Import-an-R-dataset-in-Python.html",
            "relUrl": "/jupyter/2021/08/04/Import-an-R-dataset-in-Python.html",
            "date": " • Aug 4, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Gini vs GDP per cápita",
            "content": "import numpy as np import pandas as pd import matplotlib.pyplot as plt plt.rcParams.update({&#39;xtick.labelsize&#39; : 14, &#39;ytick.labelsize&#39; : 14}) . import wbdata import seaborn as sns from scipy import stats from adjustText import adjust_text . indicators = {&#39;SI.POV.GINI&#39;:&#39;Gini Index&#39;, &#39;NY.GDP.PCAP.PP.KD&#39;:&#39;GDP per capita (constant 2010 US$)&#39;, &#39;SP.POP.TOTL&#39;:&#39;Population&#39;} . indicators = {&#39;C0.02&#39;:&#39;Country ISO3&#39;} . df1 = wbdata.get_dataframe(indicators=indicators) . df1.reset_index() . country date Country ISO3 . 0 Aruba | 2019 | None | . 1 Aruba | 2018 | None | . 2 Afghanistan | 2019 | None | . 3 Afghanistan | 2018 | None | . 4 Angola | 2019 | None | . ... ... | ... | ... | . 437 South Africa | 2018 | None | . 438 Zambia | 2019 | None | . 439 Zambia | 2018 | None | . 440 Zimbabwe | 2019 | None | . 441 Zimbabwe | 2018 | None | . 442 rows × 3 columns . wbdata.search_indicators(&quot;ISO&quot;) . id name BI.PWK.CMPA.GE.MD Cross-country public sector pay comparison ratio, by occupation: Government economist (using median) BI.PWK.CMPA.GE.SM Cross-country public sector pay comparison ratio, by occupation: Government economist (using mean) BI.PWK.CMPA.HD.MD Cross-country public sector pay comparison ratio, by occupation: Hospital doctor (using median) BI.PWK.CMPA.HD.SM Cross-country public sector pay comparison ratio, by occupation: Hospital doctor (using mean) BI.PWK.CMPA.HN.MD Cross-country public sector pay comparison ratio, by occupation: Hospital nurse (using median) BI.PWK.CMPA.HN.SM Cross-country public sector pay comparison ratio, by occupation: Hospital nurse (using mean) BI.PWK.CMPA.JU.MD Cross-country public sector pay comparison ratio, by occupation: Judge (using median) BI.PWK.CMPA.JU.SM Cross-country public sector pay comparison ratio, by occupation: Judge (using mean) BI.PWK.CMPA.PO.MD Cross-country public sector pay comparison ratio, by occupation: Police officer (using median) BI.PWK.CMPA.PO.SM Cross-country public sector pay comparison ratio, by occupation: Police officer (using mean) BI.PWK.CMPA.PT.MD Cross-country public sector pay comparison ratio, by occupation: Primary school teacher (using median) BI.PWK.CMPA.PT.SM Cross-country public sector pay comparison ratio, by occupation: Primary school teacher (using mean) BI.PWK.CMPA.SN.MD Cross-country public sector pay comparison ratio, by occupation: Senior official (using median) BI.PWK.CMPA.SN.SM Cross-country public sector pay comparison ratio, by occupation: Senior official (using mean) BI.PWK.CMPA.ST.MD Cross-country public sector pay comparison ratio, by occupation: Secondary school teacher (using median) BI.PWK.CMPA.ST.SM Cross-country public sector pay comparison ratio, by occupation: Secondary school teacher (using mean) BI.PWK.CMPA.UT.MD Cross-country public sector pay comparison ratio, by occupation: University teacher (using median) BI.PWK.CMPA.UT.SM Cross-country public sector pay comparison ratio, by occupation: University teacher (using mean) C0.02 Country ISO3 FB.INC.INST.FW.CB 001_Does a regulatory/supervisory framework exist for commercial banks?_#VGAA_00 FB.INC.INST.FW.FC 003_Does a regulatory/supervisory framework exist for financial cooperatives?_#VGAA_02 FB.INC.INST.FW.MC 005_Does a regulatory/supervisory framework exist for microcredit institutions (MCIs)?_#VGAA_04 FB.INC.INST.FW.NB 006_Does a regulatory/supervisory framework exist for non-bank e-money issuers (NBEIs)?_#VGAA_05 FB.INC.INST.FW.OB 002_Does a regulatory/supervisory framework exist for other banks?_#VGAA_01 FB.INC.INST.FW.OD 004_Does a regulatory/supervisory framework exist for other deposit taking institutions (ODTIs)?_#VGAA_03 IC.FRM.CRM.CRIME8 Percent of firms identifying crime, theft and disorder as a major constraint IC.FRM.OBS.OBST6 Percent of firms choosing crime, theft and disorder as their biggest obstacle IN.HLTH.HLTHSTAFF.NUM Health visitors &amp; Health supervisors LO.EGRA.CWPM.AFA.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Afan Oromo. 2nd Grade LO.EGRA.CWPM.AFA.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Afan Oromo. 3rd Grade LO.EGRA.CWPM.AMH.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Amharic. 2nd Grade LO.EGRA.CWPM.AMH.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Amharic. 3rd Grade LO.EGRA.CWPM.ARB.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Arabic. 2nd Grade LO.EGRA.CWPM.BMN.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Bamanankan. 2nd Grade LO.EGRA.CWPM.BOM.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Bomu. 2nd Grade LO.EGRA.CWPM.CHC.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Chichewa. 2nd Grade LO.EGRA.CWPM.CHC.4GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Chichewa. 4th Grade LO.EGRA.CWPM.ENG.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). English. 2nd Grade LO.EGRA.CWPM.ENG.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). English. 3rd Grade LO.EGRA.CWPM.ENG.4GRD EGRA: Correct Isolated Words Read Per Minute (Mean). English. 4th Grade LO.EGRA.CWPM.ENG.6GRD EGRA: Correct Isolated Words Read Per Minute (Mean). English. 6th Grade LO.EGRA.CWPM.FLF.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Fulfulde. 2nd Grade LO.EGRA.CWPM.FLP.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Filipino. 3rd Grade LO.EGRA.CWPM.HAR.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Hararigna. 2nd Grade LO.EGRA.CWPM.HAR.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Hararigna. 3rd Grade LO.EGRA.CWPM.KIS.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Kiswahili. 2nd Grade LO.EGRA.CWPM.KNY.4GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Kinyarwanda. 4th Grade LO.EGRA.CWPM.KNY.6GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Kinyarwanda. 6th Grade LO.EGRA.CWPM.SID.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Sidaamu Afoo. 2nd Grade LO.EGRA.CWPM.SID.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Sidaamu Afoo. 3rd Grade LO.EGRA.CWPM.SNG.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Songhoi. 2nd Grade LO.EGRA.CWPM.SOM.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Somaligna. 2nd Grade LO.EGRA.CWPM.SOM.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Somaligna. 3rd Grade LO.EGRA.CWPM.SPN.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Spanish. 2nd Grade LO.EGRA.CWPM.SPN.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Spanish. 3rd Grade LO.EGRA.CWPM.SPN.4GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Spanish. 4th Grade LO.EGRA.CWPM.TIG.2GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Tigrinya. 2nd Grade LO.EGRA.CWPM.TIG.3GRD EGRA: Correct Isolated Words Read Per Minute (Mean). Tigrinya. 3rd Grade SH.STA.POIS.P5 Mortality rate attributed to unintentional poisoning (per 100,000 population) SH.STA.POIS.P5.FE Mortality rate attributed to unintentional poisoning, female (per 100,000 female population) SH.STA.POIS.P5.MA Mortality rate attributed to unintentional poisoning, male (per 100,000 male population) SPI.D2.3.DSAS NSO Website - advisory/analytical services . data = wbdata.get_dataframe(indicators=indicators) . data.head() . Gini Index GDP per capita (constant 2010 US$) Population . country date . Africa Eastern and Southern 2020 NaN | 3387.594670 | 677243299.0 | . 2019 NaN | 3568.597017 | 660046272.0 | . 2018 NaN | 3579.271917 | 643090131.0 | . 2017 NaN | 3569.667028 | 626392880.0 | . 2016 NaN | 3546.711250 | 609978946.0 | . data = data.reset_index() . data[data[&quot;country&quot;]==&#39;Argentina&#39;].iloc[0,-1] . 45376763.0 . df = pd.DataFrame(columns= [&#39;Country&#39;,&#39;Gini&#39;,&#39;GDP&#39;,&#39;Population&#39;], index=None) for country in data[&quot;country&quot;].unique(): if data[data[&quot;country&quot;]==country][&#39;Gini Index&#39;].notna().sum() != 0 and data[data[&quot;country&quot;]==country][&#39;GDP per capita (constant 2010 US$)&#39;].notna().sum() != 0: gini = [data[data[&quot;country&quot;]==country][&#39;Gini Index&#39;].iloc[i] for i in range(len(data[data[&quot;country&quot;]==country])) if data[data[&quot;country&quot;]==country][&#39;Gini Index&#39;].notna().iloc[i]] gdp = [data[data[&quot;country&quot;]==country][&#39;GDP per capita (constant 2010 US$)&#39;].iloc[i] for i in range(len(data[data[&quot;country&quot;]==country])) if data[data[&quot;country&quot;]==country][&#39;GDP per capita (constant 2010 US$)&#39;].notna().iloc[i]] pop = data[data[&quot;country&quot;]==country].iloc[0,-1] df = df.append({&#39;Country&#39;:country, &#39;Gini&#39;:gini[0], &#39;GDP&#39;:gdp[0], &#39;Population&#39;:pop}, ignore_index=True) . df.head() . Country Gini GDP Population . 0 Albania | 33.2 | 13295.410885 | 2837743.0 | . 1 Algeria | 27.6 | 10681.679297 | 43851043.0 | . 2 Angola | 51.3 | 6198.083841 | 32866268.0 | . 3 Argentina | 42.9 | 19686.523659 | 45376763.0 | . 4 Armenia | 29.9 | 12592.635368 | 2963234.0 | . df = df.set_index(&quot;Country&quot;) . slope, intercept, r_value, p_value, std_err = stats.linregress(np.log10(df[&quot;GDP&quot;]), df[&quot;Gini&quot;]) slope, intercept, r_value, p_value, std_err . (-6.161114963024121, 62.781972383145074, -0.37882310730237356, 6.151978699393198e-07, 1.186238007740407) . sa = [&quot;Argentina&quot;, &quot;Bolivia&quot;, &quot;Brazil&quot;, &quot;Colombia&quot;, &quot;Ecuador&quot;, &quot;Paraguay&quot;, &quot;Peru&quot;, &quot;Uruguay&quot;] . fig, ax = plt.subplots(figsize=(10,10)) ax = sns.regplot(x=np.log10(df[&quot;GDP&quot;]), y=df[&quot;Gini&quot;], color = &#39;#092CDB&#39;, line_kws={&#39;label&#39;:f&#39;$Gini={slope:.2f}*log10(PIB)+{intercept:.1f}$&#39;}, scatter_kws={&#39;s&#39;:20}); ax.plot(np.log10(df.loc[&quot;Chile&quot;,&quot;GDP&quot;]),df.loc[&quot;Chile&quot;,&quot;Gini&quot;], marker=&quot;*&quot;, color=&quot;C3&quot;) for c in sa: ax.plot(np.log10(df.loc[c,&quot;GDP&quot;]), df.loc[c,&quot;Gini&quot;], marker=&#39;o&#39;, color=&quot;green&quot;) plt.arrow(4.7,60,0.2,0, length_includes_head=True, head_width=0.5, head_length=0.02, color=&quot;black&quot;) plt.arrow(4.55,58,0,-3.5, length_includes_head=True, head_width=0.02, head_length=0.5, color=&quot;black&quot;) plt.annotate(&quot;Mayor riqueza&quot;,(4.8,61), va=&#39;bottom&#39;, ha=&#39;center&#39;, fontsize=12) plt.annotate(&quot;Menor desigualdad&quot;,(4.8,56), va=&#39;bottom&#39;, ha=&#39;center&#39;, fontsize=12) texts = [plt.annotate(txt, (np.log10(df.iloc[i,1]), df.iloc[i,0]), textcoords=&quot;offset points&quot;, xytext=(-1,2), fontsize=&quot;medium&quot;) for i, txt in enumerate(df.index)] adjust_text(texts) ax.set_xticks([np.log10(10**3), np.log10(5000), np.log10(10**4), np.log10(50000), np.log10(10**5)]) ax.set_xticklabels([&quot;1.000&quot;,&quot;5.000&quot;,&quot;10.000&quot;,&quot;50.000&quot;,&quot;100.000&quot;]) ax.set_xlabel(f&#39;PIB per cápita (USD ajustados por inflación a valor 2010) (escala logarítmica)&#39;, fontsize=&#39;x-large&#39;) ax.set_ylabel(f&quot;Índice de Gini&quot;, fontsize=&quot;x-large&quot;) ax.legend(loc=&#39;lower left&#39;) plt.show() . df[&quot;GDP&quot;] = np.log10(df[&quot;GDP&quot;]) . df[&quot;Population&quot;] = np.exp(df[&quot;Population&quot;]) . df = df.reset_index() . import plotly.express as px fig = px.scatter(df, x=&quot;GDP&quot;, y=&quot;Gini&quot;, size=&quot;Population&quot;, hover_data=[&#39;Country&#39;]) fig.show() .",
            "url": "https://alonsosilvaallende.github.io/data-analysis/jupyter/2021/08/04/Gini-vs-GDP-World.html",
            "relUrl": "/jupyter/2021/08/04/Gini-vs-GDP-World.html",
            "date": " • Aug 4, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://alonsosilvaallende.github.io/data-analysis/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://alonsosilvaallende.github.io/data-analysis/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Me llamo Alonso Silva y soy investigador en aprendizaje de máquinas en Safran, una empresa internacional de alta tecnología que opera en los dominios de la propulsión y de equipos aeronáuticos, del espacio y de la defensa. Estoy a cargo de proponer y evaluar estrategias de mantenimiento predictivas en dos niveles distintos: primero, predecir el tiempo estimado de supervivencia de las componentes utilizadas en nuestros equipos, junto con los intervalos de confianza de las predicciones; y segundo, proponer y evaluar estrategias de mantenimiento a través de algoritmos de optimización con dependencias intertemporales. . Página personal: http://www.dim.uchile.cl/~alsilva/ . Twitter: @alonsosilva .",
          "url": "https://alonsosilvaallende.github.io/data-analysis/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://alonsosilvaallende.github.io/data-analysis/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}